NOTE: not all productions give semantically correct structure, so of 
errors about semantic should be judged during semantic analysis.
and it definitely not LL(k) grammar.

grammar:
    prog := statementlist
   
    statementlist := exprstatement
       | statementlist exprstatement
   
    exprstatement := expr ';'
   
    expr := assignmentexpr
   
    assignmentexpr := lefthandside '=' assignmentexpr
        | additive

    additive := multitive
        | additive '+' multitive
        | additive '-' multitive

    multitive := unary
        | unary '*' lefthandside
        | unary '/' lefthandside

    unary := '++' unary
        | '--' unary
        | '-' unary
        | '+' unary
        | postfix

    postfix := lefthandside '++'
        | lefthandside '--'
        | lefthandside

    lefthandside := newexpr
        | callexpr
        
    newexpr := NEW memberexpr
        | memberexpr

    callexpr := memberexpr args
   
    memberexpr := primary
        | memberexpr '.' primary 
   
    args := '(' ')' 
        | '(' arglist ')'
   
    arglist := primary 
        | primary ',' arglist
   
    primary := primitive
        | ident

    primitive := 
        | NullLiteral
        | BooleanLiteral
        | NumericLiteral
        | StringLiteral
        | RegularExpressionLiteral


lexical:
    ident := undefined 
        | [$_:alpha:][$_:alnum:]*
    NullLiteral := null
    BooleanLiteral := true | false;
    NumericLiteral := \d*{.\d*{e\d+}}
    StringLiteral := " [^"]* " | ' [^']* '
    RegularExpressionLiteral := /[^/]*/[ig]

    reserved := function
        | var
        | break   
        | do  
        | instanceof  
        | typeof
        | case    
        | else    
        | new 
        | catch   
        | finally 
        | return  
        | void
        | continue    
        | for 
        | switch  
        | while
        | debugger    
        | this    
        | with
        | default 
        | if  
        | throw   
        | delete  
        | in  
        | try
